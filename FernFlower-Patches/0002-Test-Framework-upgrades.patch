From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: LexManos <LexManos@gmail.com>
Date: Tue, 11 Apr 2017 23:18:58 -0700
Subject: [PATCH] Test Framework upgrades


diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/Exprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/Exprent.java
index bb303e84f33161a4b4fd40a73aa48d29981d9ef2..cc1f537e71af0748b7b97d7d8489198e2a677cc9 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/Exprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/Exprent.java
@@ -110,6 +110,10 @@ public class Exprent implements IMatchable {
     throw new RuntimeException("not implemented");
   }
 
+  public TextBuffer toJava() {
+    return toJava(0, BytecodeMappingTracer.DUMMY);
+  }
+
   public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) {
     throw new RuntimeException("not implemented");
   }
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/stats/Statement.java b/src/org/jetbrains/java/decompiler/modules/decompiler/stats/Statement.java
index 2b23675a5a93fc8b2a2e48f737b33e1128d23d32..a934afac9330104067f295e6e940f0370abb992f 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/stats/Statement.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/stats/Statement.java
@@ -437,6 +437,10 @@ public abstract class Statement implements IMatchable {
     return false;
   }
 
+  public TextBuffer toJava() {
+    return toJava(0, BytecodeMappingTracer.DUMMY);
+  }
+
   public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) {
     throw new RuntimeException("not implemented");
   }
diff --git a/test/org/jetbrains/java/decompiler/DecompilerTestFixture.java b/test/org/jetbrains/java/decompiler/DecompilerTestFixture.java
index 72ef0ba671bdd422a382c3e0803898785a87e4e5..8068c95bc177e2ece76117a924ffe810d36e50c4 100644
--- a/test/org/jetbrains/java/decompiler/DecompilerTestFixture.java
+++ b/test/org/jetbrains/java/decompiler/DecompilerTestFixture.java
@@ -31,6 +31,7 @@ public class DecompilerTestFixture {
   private Path tempDir;
   private Path targetDir;
   private TestConsoleDecompiler decompiler;
+  private boolean cleanup = true;
 
   public void setUp(Map<String, String> customOptions) throws IOException {
     setUp(customOptions, null);
@@ -69,7 +70,7 @@ public class DecompilerTestFixture {
 
   public void tearDown() throws IOException {
     try {
-      if (tempDir != null) {
+      if (tempDir != null && cleanup) {
         deleteRecursively(tempDir);
       }
     }
@@ -94,6 +95,14 @@ public class DecompilerTestFixture {
     return decompiler;
   }
 
+  public void setCleanup(boolean value) {
+    this.cleanup = value;
+  }
+
+  public boolean getCleanup() {
+    return cleanup;
+  }
+
   private static boolean isTestDataDir(Path dir) {
     return Files.isDirectory(dir) && Files.isDirectory(dir.resolve("classes")) && Files.isDirectory(dir.resolve("results"));
   }
diff --git a/test/org/jetbrains/java/decompiler/SingleClassesTest.java b/test/org/jetbrains/java/decompiler/SingleClassesTest.java
index e07bf8790b02da4e7c2dfa352f9108a374ff152e..752665f316cb6297a75272da8e4942f7372fb544 100644
--- a/test/org/jetbrains/java/decompiler/SingleClassesTest.java
+++ b/test/org/jetbrains/java/decompiler/SingleClassesTest.java
@@ -4,28 +4,13 @@ package org.jetbrains.java.decompiler;
 import org.jetbrains.java.decompiler.main.DecompilerContext;
 import org.jetbrains.java.decompiler.main.extern.ClassFormatException;
 import org.jetbrains.java.decompiler.main.extern.IFernflowerPreferences;
-import org.junit.After;
-import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.Timeout;
 
-import java.io.IOException;
-import java.io.UncheckedIOException;
-import java.nio.file.DirectoryStream;
-import java.nio.file.Files;
-import java.nio.file.Path;
-import java.util.ArrayList;
-import java.util.List;
 import java.util.Map;
 
-import static org.assertj.core.api.Assertions.assertThat;
-import static org.jetbrains.java.decompiler.DecompilerTestFixture.assertFilesEqual;
-import static org.junit.Assert.assertTrue;
-
-public class SingleClassesTest {
-  private DecompilerTestFixture fixture;
-
+public class SingleClassesTest extends SingleClassesTestBase {
   /*
    * Set individual test duration time limit to 60 seconds.
    * This will help us to test bugs hanging decompiler.
@@ -33,22 +18,15 @@ public class SingleClassesTest {
   @Rule
   public Timeout globalTimeout = Timeout.seconds(60);
 
-  @Before
-  public void setUp() throws IOException {
-    fixture = new DecompilerTestFixture();
-    fixture.setUp(Map.of(IFernflowerPreferences.BYTECODE_SOURCE_MAPPING, "1",
+  @Override
+  protected Map<String, String> getDecompilerOptions() {
+    return Map.of(IFernflowerPreferences.BYTECODE_SOURCE_MAPPING, "1",
                          IFernflowerPreferences.DUMP_ORIGINAL_LINES, "1",
                          IFernflowerPreferences.IGNORE_INVALID_BYTECODE, "1",
                          IFernflowerPreferences.VERIFY_ANONYMOUS_CLASSES, "1",
                          IFernflowerPreferences.CONVERT_PATTERN_SWITCH, "1",
                          IFernflowerPreferences.CONVERT_RECORD_PATTERN, "1"
-    ));
-  }
-
-  @After
-  public void tearDown() throws IOException {
-    fixture.tearDown();
-    fixture = null;
+    );
   }
 
   @Test public void testPrimitiveNarrowing() { doTest("pkg/TestPrimitiveNarrowing"); }
@@ -251,48 +229,4 @@ public class SingleClassesTest {
 
   @Test public void testSwitchOnStatic() { doTest("pkg/SwitchOnStatic"); }
 
-  private void doTest(String testFile, String... companionFiles) {
-    var decompiler = fixture.getDecompiler();
-
-    var classFile = fixture.getTestDataDir().resolve("classes/" + testFile + ".class");
-    assertThat(classFile).isRegularFile();
-    for (var file : collectClasses(classFile)) {
-      decompiler.addSource(file.toFile());
-    }
-
-    for (String companionFile : companionFiles) {
-      var companionClassFile = fixture.getTestDataDir().resolve("classes/" + companionFile + ".class");
-      assertThat(companionClassFile).isRegularFile();
-      for (var file : collectClasses(companionClassFile)) {
-        decompiler.addSource(file.toFile());
-      }
-    }
-
-    decompiler.decompileContext();
-
-    var decompiledFile = fixture.getTargetDir().resolve(classFile.getFileName().toString().replace(".class", ".java"));
-    assertThat(decompiledFile).isRegularFile();
-    assertTrue(Files.isRegularFile(decompiledFile));
-    var referenceFile = fixture.getTestDataDir().resolve("results/" + classFile.getFileName().toString().replace(".class", ".dec"));
-    assertThat(referenceFile).isRegularFile();
-    assertFilesEqual(referenceFile, decompiledFile);
-  }
-
-  static List<Path> collectClasses(Path classFile) {
-    var files = new ArrayList<Path>();
-    files.add(classFile);
-
-    var parent = classFile.getParent();
-    if (parent != null) {
-      var glob = classFile.getFileName().toString().replace(".class", "$*.class");
-      try (DirectoryStream<Path> inner = Files.newDirectoryStream(parent, glob)) {
-        inner.forEach(files::add);
-      }
-      catch (IOException e) {
-        throw new UncheckedIOException(e);
-      }
-    }
-
-    return files;
-  }
 }
diff --git a/test/org/jetbrains/java/decompiler/SingleClassesTestBase.java b/test/org/jetbrains/java/decompiler/SingleClassesTestBase.java
new file mode 100644
index 0000000000000000000000000000000000000000..1e36c79314a4b8c552b32f33c69d70eb45ef1cfa
--- /dev/null
+++ b/test/org/jetbrains/java/decompiler/SingleClassesTestBase.java
@@ -0,0 +1,82 @@
+// Copyright 2000-2023 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.
+package org.jetbrains.java.decompiler;
+
+import org.junit.After;
+import org.junit.Before;
+import java.io.IOException;
+import java.io.UncheckedIOException;
+import java.nio.file.DirectoryStream;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.jetbrains.java.decompiler.DecompilerTestFixture.assertFilesEqual;
+import static org.junit.Assert.assertTrue;
+
+public class SingleClassesTestBase {
+  protected DecompilerTestFixture fixture;
+
+  protected Map<String, String> getDecompilerOptions() {
+    return Map.of();
+  }
+
+  @Before
+  public void setUp() throws IOException {
+    fixture = new DecompilerTestFixture();
+    fixture.setUp(getDecompilerOptions());
+  }
+
+  @After
+  public void tearDown() throws IOException {
+    fixture.tearDown();
+    fixture = null;
+  }
+
+  protected void doTest(String testFile, String... companionFiles) {
+    var decompiler = fixture.getDecompiler();
+
+    var classFile = fixture.getTestDataDir().resolve("classes/" + testFile + ".class");
+    assertThat(classFile).isRegularFile();
+    for (var file : collectClasses(classFile)) {
+      decompiler.addSource(file.toFile());
+    }
+
+    for (String companionFile : companionFiles) {
+      var companionClassFile = fixture.getTestDataDir().resolve("classes/" + companionFile + ".class");
+      assertThat(companionClassFile).isRegularFile();
+      for (var file : collectClasses(companionClassFile)) {
+        decompiler.addSource(file.toFile());
+      }
+    }
+
+    decompiler.decompileContext();
+
+    var decompiledFile = fixture.getTargetDir().resolve(classFile.getFileName().toString().replace(".class", ".java"));
+    assertThat(decompiledFile).isRegularFile();
+    assertTrue(Files.isRegularFile(decompiledFile));
+    var referenceFile = fixture.getTestDataDir().resolve("results/" + classFile.getFileName().toString().replace(".class", ".dec"));
+    assertThat(referenceFile).isRegularFile();
+    assertFilesEqual(referenceFile, decompiledFile);
+  }
+
+  static List<Path> collectClasses(Path classFile) {
+    var files = new ArrayList<Path>();
+    files.add(classFile);
+
+    var parent = classFile.getParent();
+    if (parent != null) {
+      var glob = classFile.getFileName().toString().replace(".class", "$*.class");
+      try (DirectoryStream<Path> inner = Files.newDirectoryStream(parent, glob)) {
+        inner.forEach(files::add);
+      }
+      catch (IOException e) {
+        throw new UncheckedIOException(e);
+      }
+    }
+
+    return files;
+  }
+}
\ No newline at end of file
