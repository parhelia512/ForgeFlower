From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: LexManos <LexManos@gmail.com>
Date: Wed, 17 Apr 2024 20:33:59 -0700
Subject: [PATCH] Fix synthetic parameters that are not stored in fields.


diff --git a/src/org/jetbrains/java/decompiler/main/ClassWriter.java b/src/org/jetbrains/java/decompiler/main/ClassWriter.java
index 59b0dfda877aa5ff0eaf7ce171ece495e0b8223d..945be0c96ce187f749f7ab9ad67f0d410acb4fdb 100644
--- a/src/org/jetbrains/java/decompiler/main/ClassWriter.java
+++ b/src/org/jetbrains/java/decompiler/main/ClassWriter.java
@@ -825,8 +825,8 @@ public class ClassWriter {
         //if (init && !isEnum && ((node.access & CodeConstants.ACC_STATIC) == 0) && node.type == ClassNode.CLASS_MEMBER)
         //    index++;
         for (int i = methodWrapper.varproc.getFirstParameterPosition(); i < md.params.length; i++) {
-          VarType parameterType = hasDescriptor && !descriptor.parameterTypes.isEmpty() ? descriptor.parameterTypes.get(paramCount) : md.params[i];
           if (mask == null || mask.get(i) == null) {
+            VarType parameterType = hasDescriptor && !descriptor.parameterTypes.isEmpty() ? descriptor.parameterTypes.get(paramCount) : md.params[i];
             if (paramCount > 0) {
               buffer.append(", ");
             }
@@ -874,7 +874,7 @@ public class ClassWriter {
             paramCount++;
           }
 
-          index += parameterType.getStackSize();
+          index += md.params[i].getStackSize();
         }
 
         buffer.append(')');
@@ -1157,13 +1157,13 @@ public class ClassWriter {
 
     StructClass cl = node.getWrapper().getClassStruct();
 
-	  int classAccessFlags = node.type == ClassNode.CLASS_ROOT ? cl.getAccessFlags() : node.access;
+    int classAccessFlags = node.type == ClassNode.CLASS_ROOT ? cl.getAccessFlags() : node.access;
     boolean isEnum = cl.hasModifier(CodeConstants.ACC_ENUM) && DecompilerContext.getOption(IFernflowerPreferences.DECOMPILE_ENUM);
 
     // default constructor requires same accessibility flags. Exception: enum constructor which is always private
     if (!isEnum && ((classAccessFlags & ACCESSIBILITY_FLAGS) != (methodAccessFlags & ACCESSIBILITY_FLAGS))) {
-  	  return false;
-  	}
+      return false;
+    }
 
     int count = 0;
     for (StructMethod mt : cl.getMethods()) {
diff --git a/src/org/jetbrains/java/decompiler/main/rels/NestedClassProcessor.java b/src/org/jetbrains/java/decompiler/main/rels/NestedClassProcessor.java
index fe68098cb9bc2ecfb002438a7b1ed9748d957497..9efa40d52f580bea5237cc945ef4fcd5360402dc 100644
--- a/src/org/jetbrains/java/decompiler/main/rels/NestedClassProcessor.java
+++ b/src/org/jetbrains/java/decompiler/main/rels/NestedClassProcessor.java
@@ -78,7 +78,7 @@ public class NestedClassProcessor {
 
         if (child.type == ClassNode.CLASS_LOCAL && child.enclosingMethod != null) {
           MethodWrapper enclosingMethodWrapper = node.getWrapper().getMethods().getWithKey(child.enclosingMethod);
-          if(enclosingMethodWrapper != null) { // e.g. in case of switch-on-enum. FIXME: some proper handling of multiple enclosing classes 
+          if(enclosingMethodWrapper != null) { // e.g. in case of switch-on-enum. FIXME: some proper handling of multiple enclosing classes
             setLocalClassDefinition(enclosingMethodWrapper, child);
           }
         }
@@ -406,12 +406,24 @@ public class NestedClassProcessor {
       // set resulting constructor signatures
       for (Entry<String, List<VarFieldPair>> entry : enclosing.getValue().entrySet()) {
         mergeListSignatures(entry.getValue(), interPairMask, false);
+        var wrapper = nestedNode.getWrapper().getMethodWrapper(CodeConstants.INIT_NAME, entry.getKey());
 
         List<VarVersionPair> mask = new ArrayList<>(entry.getValue().size());
-        for (VarFieldPair pair : entry.getValue()) {
-          mask.add(pair != null && !pair.fieldKey.isEmpty() ? pair.varPair : null);
+        var attr = wrapper.methodStruct.getAttribute(StructGeneralAttribute.ATTRIBUTE_METHOD_PARAMETERS);
+        if (attr != null) {
+          for (var param : attr.getEntries()) {
+            mask.add((param.myAccessFlags & (CodeConstants.ACC_SYNTHETIC | CodeConstants.ACC_MANDATED)) == 0 ? null : new VarVersionPair(-1, 0));
+          }
+        } else {
+          for (VarFieldPair pair : entry.getValue()) {
+            VarVersionPair ver = pair != null && !pair.fieldKey.isEmpty() ? pair.varPair : null;
+            if (ver == null && mask.isEmpty() && nestedNode.type == ClassNode.CLASS_MEMBER && !ExprUtil.isStatic(nestedNode.classStruct)) {
+              ver = new VarVersionPair(-1, 0); // non-static inners always have 'Outer.this'
+            }
+            mask.add(ver);
+          }
         }
-        nestedNode.getWrapper().getMethodWrapper(CodeConstants.INIT_NAME, entry.getKey()).synthParameters = mask;
+        wrapper.synthParameters = mask;
       }
     }
   }
@@ -968,6 +980,11 @@ public class NestedClassProcessor {
     public int hashCode() {
       return fieldKey.hashCode() + varPair.hashCode();
     }
+
+    @Override
+    public String toString() {
+      return "VarFieldPair[fieldKey=" + fieldKey + ", varPair=" + varPair + "]";
+    }
   }
 
   private static interface ExprentIteratorWithReplace {
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ExprUtil.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ExprUtil.java
index ed7182b90388ba221ca97b6ddd5c640dbc062746..fc5f1486fb3d3cc40bb26951d951f174cd6639fe 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ExprUtil.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ExprUtil.java
@@ -46,7 +46,7 @@ public final class ExprUtil {
     return mask;
   }
 
-  private static boolean isStatic(StructClass struct) {
+  public static boolean isStatic(StructClass struct) {
     if (struct.hasModifier(CodeConstants.ACC_STATIC))
       return true;
     if (struct.hasAttribute(StructGeneralAttribute.ATTRIBUTE_INNER_CLASSES)) {
